import pygame
import sys
import os

# Initialize pygame
pygame.init()
pygame.mixer.init()

# Game constants
SCREEN_WIDTH = 640
SCREEN_HEIGHT = 480
LEVEL_WIDTH = 1000
LEVEL_HEIGHT = 480

# Game classes
class Game:
    def __init__(self):
        self.screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
        self.clock = pygame.time.Clock()
        self.levels = [Level1(), Level2(), Level3()]
        self.current_level = 0
        self.player = Player()
        self.scoreboard = Scoreboard(self.player)

    def run(self):
        while True:
            self.clock.tick(60)
            self.handle_events()
            self.update()
            self.render()

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()

    def update(self):
        self.player.update(self.levels[self.current_level].coins)
        self.levels[self.current_level].update()

    def render(self):
        self.screen.fill((255, 255, 255))
        self.levels[self.current_level].render(self.screen)
        self.player.render(self.screen)
        self.scoreboard.render(self.screen)
        pygame.display.flip()

class Level:
    def __init__(self, layout, coins, enemies):
        self.layout = layout
        self.coins = coins
        self.enemies = enemies

    def update(self):
        for enemy in self.enemies:
            enemy.update()

    def render(self, screen):
        for platform in self.layout:
            pygame.draw.rect(screen, (0, 0, 0), platform)
        for coin in self.coins:
            coin.render(screen)
        for enemy in self.enemies:
            enemy.render(screen)

# Example levels
class Level1(Level):
    def __init__(self):
        layout = [
            pygame.Rect(100, 300, 200, 20),
            pygame.Rect(400, 200, 200, 20)
        ]
        coins = [
            Coin(150, 280, 10),
            Coin(450, 180, 10)
        ]
        enemies = [
            Enemy(200, 280, 2),
            Enemy(500, 180, 2)
        ]
        super().__init__(layout, coins, enemies)

class Level2(Level):
    def __init__(self):
        layout = [
            pygame.Rect(150, 350, 250, 20),
            pygame.Rect(500, 250, 150, 20)
        ]
        coins = [
            Coin(200, 330, 10),
            Coin(550, 230, 10)
        ]
        enemies = [
            Enemy(300, 330, 3),
            Enemy(600, 230, 3)
        ]
        super().__init__(layout, coins, enemies)

class Level3(Level):
    def __init__(self):
        layout = [
            pygame.Rect(200, 400, 300, 20),
            pygame.Rect(600, 300, 100, 20)
        ]
        coins = [
            Coin(250, 380, 10),
            Coin(650, 280, 10)
        ]
        enemies = [
            Enemy(400, 380, 4),
            Enemy(700, 280, 4)
        ]
        super().__init__(layout, coins, enemies)

class Player:
    def __init__(self):  
        self.x = 100
        self.y = 100
        self.speed = 5
        self.score = 0

    def update(self, coins):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT]:
            self.x -= self.speed
        if keys[pygame.K_RIGHT]:
            self.x += self.speed
        if keys[pygame.K_UP]:
            self.y -= self.speed
        if keys[pygame.K_DOWN]:
            self.y += self.speed

        self.collect_coins(coins)

    def collect_coins(self, coins):
        player_rect = pygame.Rect(self.x, self.y, 20, 20)
        for coin in coins[:]:
            coin_rect = pygame.Rect(coin.x - 5, coin.y - 5, 10, 10)
            if player_rect.colliderect(coin_rect):
                self.score += coin.value
                coins.remove(coin)

    def render(self, screen):
        pygame.draw.rect(screen, (255, 0, 0), (self.x, self.y, 20, 20))

class Coin:
    def __init__(self, x, y, value):
        self.x = x
        self.y = y
        self.value = value

    def render(self, screen):
        pygame.draw.circle(screen, (255, 255, 0), (self.x, self.y), 5)

class Enemy:
    def __init__(self, x, y, speed):
        self.x = x
        self.y = y
        self.speed = speed

    def update(self):
        self.x += self.speed
        if self.x > LEVEL_WIDTH or self.x < 0:
            self.speed = -self.speed

    def render(self, screen):
        pygame.draw.rect(screen, (255, 0, 0), (self.x, self.y, 20, 20))

class Scoreboard:
    def __init__(self, player):
        self.font = pygame.font.Font(None, 36)
        self.player = player

    def render(self, screen):
        text = self.font.render("Score: " + str(self.player.score), True, (0, 0, 0))
        screen.blit(text, (10, 10))

# Main execution
if __name__ == "__main__":
    game = Game()
    game.run()
